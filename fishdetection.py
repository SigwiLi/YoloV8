# -*- coding: utf-8 -*-
"""FishDetection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pxESUEaEGi-VbXwnKyaFT4NKkNeCw-Qe
"""

import cv2

from ultralytics import YOLO
model = YOLO("E:/Python/FishBest.pt")
video_path = "E:/Python/Vid12.MOV"
cap = cv2.VideoCapture(video_path)

# Loop through the video frames
while cap.isOpened():
    # Read a frame from the video
    success, frame = cap.read()

    if success:
        # Run YOLOv8 tracking on the frame, persisting tracks between frames
        results = model.track(frame, persist=True)

        # Visualize the results on the frame
        annotated_frame = results[0].plot()

        # Display the annotated frame
        cv2.imshow("YOLOv8 Tracking", annotated_frame)

        # Break the loop if 'q' is pressed
        if cv2.waitKey(1) & 0xFF == ord("q"):
            break
    else:
        # Break the loop if the end of the video is reached
        break

# Release the video capture object and close the display window
cap.release()
cv2.destroyAllWindows()

"""This study utilizes a YOLOv8 detection model to identify fish in a video recorded from a fish tank.

A dataset consisting of 11 images of fish within the tank was uploaded to Roboflow, where bounding boxes were manually annotated around the fish in each image. These labeled images were then used to train a YOLOv8 model on a GPU. The training process was conducted over 3 epochs.

Upon completion of the training, a .pt file containing the trained model was generated. This model was subsequently applied to detect fish in the recorded video, which featured the same fish in the same tank. The detection code was executed to visualize the model's ability to identify the fish.

The model successfully detected fish throughout the video, demonstrating high performance under normal conditions. However, detection accuracy decreased during moments of significant blurriness in the video.
"""